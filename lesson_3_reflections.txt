When would you want to use a remote repository rather than keeping all your work
local?
- You might want to use a remote repository when you are working on a project with multiple members contributing or when you want to have your work backed up online.
  
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
- Thanges from the remote may not be compatible with the current branch that you
  are working from (especially if you are doing something like working on a new
  feature) so it makes sense to only pull changes when ready/willing to do so

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

- forks are like an online copy of an "original repo" that are then brought
  under your user account and tied to a new GitHub URL
- clone: a local direct copy of a repo's file and commit history onto your local  machine
- branch: like an ideological split of a repo where the files are usually mostly
  the same, but the branch is split off from a certain commit and has it's
  commit history in the repo. Different branches share the same files.

What is the benefit of having a copy of the last known state of the remote
stored locally?

- the benefit is that you will have access to the current state of the remote
  repo while offline, thus allowing you to compare it to your local work
  without needing to merge in the changes before going offline. Any changes made
  while offline can at least be made compatible with the locally fetched remote

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

- collaborating without github would make collaborating remotely more tedious
  since file changes would need to be managed and merged manually with oversight
  by the team. 
- collaborating without git would make tracking versions and changes difficult
  since there wouldn't be a convenient commit log of all changes to the repo

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

- it makes sense to make changes in a branch of a repo because this keeps 
  development of potentially functionality breaking code seperate from the main
  "master" code branch, and a history of that particular feature is logged 
  exclusivley in that feature branch, instead of being lumped in with ALL the 
  other changes that are also made to the master branch.
